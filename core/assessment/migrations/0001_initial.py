# Generated by Django 4.2.17 on 2025-01-11 11:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('question_visibility_limit', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('time_limit', models.IntegerField(help_text='Time limit in seconds', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3600)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(help_text='The question text.', max_length=1000)),
                ('hint', models.TextField(blank=True, help_text='A hint to help the student.', max_length=255, null=True)),
                ('type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('MSQ', 'Multiple Select Question'), ('NAT', 'Numerical Answer Type'), ('DESC', 'Descriptive Question')], help_text='The type of question.', max_length=10)),
                ('partial_marking', models.BooleanField(default=False, help_text='Enable partial marking for the question.', null=True)),
                ('marks', models.IntegerField(help_text='The maximum marks for the question.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessment.assessment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.TextField(max_length=255)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='assessment.question')),
            ],
        ),
        migrations.CreateModel(
            name='NATSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_explanation', models.TextField(max_length=1000)),
                ('value', models.FloatField()),
                ('tolerance_max', models.FloatField()),
                ('tolerance_min', models.FloatField()),
                ('decimal_precision', models.PositiveIntegerField()),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='assessment.question')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MSQSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_explanation', models.TextField(max_length=1000)),
                ('choice', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='assessment.questionoption')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.question')),
            ],
        ),
        migrations.CreateModel(
            name='MCQSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_explanation', models.TextField(max_length=1000)),
                ('choice', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mcq_solution', to='assessment.questionoption')),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='assessment.question')),
            ],
        ),
        migrations.CreateModel(
            name='DescriptiveSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_explanation', models.TextField(max_length=1000)),
                ('model_solution', models.TextField(max_length=1000)),
                ('max_word_limit', models.PositiveIntegerField(blank=True, help_text='Maximum allowed word count for the answer. Leave blank if unlimited.', null=True)),
                ('min_word_limit', models.PositiveIntegerField(blank=True, help_text='Minimum required word count for the answer. Leave blank if no minimum.', null=True)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='assessment.question')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='msqsolution',
            constraint=models.UniqueConstraint(fields=('question', 'choice'), name='unique_msq_choice'),
        ),
        migrations.AddConstraint(
            model_name='mcqsolution',
            constraint=models.UniqueConstraint(fields=('question', 'choice'), name='unique_mcq_choice'),
        ),
    ]
